// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package container

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ContainerClient is the client API for Container service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ContainerClient interface {
	List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListReply, error)
	Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateReply, error)
	Inspect(ctx context.Context, in *InspectRequest, opts ...grpc.CallOption) (*InspectReply, error)
	Start(ctx context.Context, in *StartRequest, opts ...grpc.CallOption) (*StartReply, error)
	Stop(ctx context.Context, in *StopRequest, opts ...grpc.CallOption) (*StopReply, error)
	Remove(ctx context.Context, in *RemoveRequest, opts ...grpc.CallOption) (*RemoveReply, error)
	Restart(ctx context.Context, in *RestartRequest, opts ...grpc.CallOption) (*RestartReply, error)
	Update(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*UpdateReply, error)
	Kill(ctx context.Context, in *KillRequest, opts ...grpc.CallOption) (*KillReply, error)
	Status(ctx context.Context, in *StatusRequest, opts ...grpc.CallOption) (*StatusReply, error)
	// 容器备份客户端接口
	CreateBackup(ctx context.Context, in *CreateBackupRequest, opts ...grpc.CallOption) (*CreateBackupReply, error)
	UpdateBackup(ctx context.Context, in *UpdateBackupRequest, opts ...grpc.CallOption) (*UpdateBackupReply, error)
	ResumeBackup(ctx context.Context, in *ResumeBackupRequest, opts ...grpc.CallOption) (*ResumeBackupReply, error)
	RemoveBackup(ctx context.Context, in *RemoveBackupRequest, opts ...grpc.CallOption) (*RemoveBackupReply, error)
	ListBackup(ctx context.Context, in *ListBackupRequest, opts ...grpc.CallOption) (*ListBackupReply, error)
	// 容器备份内部接口
	AddBackupJob(ctx context.Context, in *AddBackupJobRequest, opts ...grpc.CallOption) (*AddBackupJobReply, error)
	GetBackupJob(ctx context.Context, in *GetBackupJobRequest, opts ...grpc.CallOption) (*GetBackupJobReply, error)
	DelBackupJob(ctx context.Context, in *DelBackupJobRequest, opts ...grpc.CallOption) (*DelBackupJobReply, error)
	ListTemplate(ctx context.Context, in *ListTemplateRequest, opts ...grpc.CallOption) (*ListTemplateReply, error)
	CreateTemplate(ctx context.Context, in *CreateTemplateRequest, opts ...grpc.CallOption) (*CreateTemplateReply, error)
	UpdateTemplate(ctx context.Context, in *UpdateTemplateRequest, opts ...grpc.CallOption) (*UpdateTemplateReply, error)
	RemoveTemplate(ctx context.Context, in *RemoveTemplateRequest, opts ...grpc.CallOption) (*RemoveTemplateReply, error)
	InspectTemplate(ctx context.Context, in *InspectTemplateRequest, opts ...grpc.CallOption) (*InspectTemplateReply, error)
	// 监控历史数据查询
	MonitorHistory(ctx context.Context, in *MonitorHistoryRequest, opts ...grpc.CallOption) (*MonitorHistoryReply, error)
}

type containerClient struct {
	cc grpc.ClientConnInterface
}

func NewContainerClient(cc grpc.ClientConnInterface) ContainerClient {
	return &containerClient{cc}
}

func (c *containerClient) List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListReply, error) {
	out := new(ListReply)
	err := c.cc.Invoke(ctx, "/container.Container/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *containerClient) Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateReply, error) {
	out := new(CreateReply)
	err := c.cc.Invoke(ctx, "/container.Container/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *containerClient) Inspect(ctx context.Context, in *InspectRequest, opts ...grpc.CallOption) (*InspectReply, error) {
	out := new(InspectReply)
	err := c.cc.Invoke(ctx, "/container.Container/Inspect", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *containerClient) Start(ctx context.Context, in *StartRequest, opts ...grpc.CallOption) (*StartReply, error) {
	out := new(StartReply)
	err := c.cc.Invoke(ctx, "/container.Container/Start", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *containerClient) Stop(ctx context.Context, in *StopRequest, opts ...grpc.CallOption) (*StopReply, error) {
	out := new(StopReply)
	err := c.cc.Invoke(ctx, "/container.Container/Stop", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *containerClient) Remove(ctx context.Context, in *RemoveRequest, opts ...grpc.CallOption) (*RemoveReply, error) {
	out := new(RemoveReply)
	err := c.cc.Invoke(ctx, "/container.Container/Remove", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *containerClient) Restart(ctx context.Context, in *RestartRequest, opts ...grpc.CallOption) (*RestartReply, error) {
	out := new(RestartReply)
	err := c.cc.Invoke(ctx, "/container.Container/Restart", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *containerClient) Update(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*UpdateReply, error) {
	out := new(UpdateReply)
	err := c.cc.Invoke(ctx, "/container.Container/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *containerClient) Kill(ctx context.Context, in *KillRequest, opts ...grpc.CallOption) (*KillReply, error) {
	out := new(KillReply)
	err := c.cc.Invoke(ctx, "/container.Container/Kill", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *containerClient) Status(ctx context.Context, in *StatusRequest, opts ...grpc.CallOption) (*StatusReply, error) {
	out := new(StatusReply)
	err := c.cc.Invoke(ctx, "/container.Container/Status", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *containerClient) CreateBackup(ctx context.Context, in *CreateBackupRequest, opts ...grpc.CallOption) (*CreateBackupReply, error) {
	out := new(CreateBackupReply)
	err := c.cc.Invoke(ctx, "/container.Container/CreateBackup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *containerClient) UpdateBackup(ctx context.Context, in *UpdateBackupRequest, opts ...grpc.CallOption) (*UpdateBackupReply, error) {
	out := new(UpdateBackupReply)
	err := c.cc.Invoke(ctx, "/container.Container/UpdateBackup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *containerClient) ResumeBackup(ctx context.Context, in *ResumeBackupRequest, opts ...grpc.CallOption) (*ResumeBackupReply, error) {
	out := new(ResumeBackupReply)
	err := c.cc.Invoke(ctx, "/container.Container/ResumeBackup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *containerClient) RemoveBackup(ctx context.Context, in *RemoveBackupRequest, opts ...grpc.CallOption) (*RemoveBackupReply, error) {
	out := new(RemoveBackupReply)
	err := c.cc.Invoke(ctx, "/container.Container/RemoveBackup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *containerClient) ListBackup(ctx context.Context, in *ListBackupRequest, opts ...grpc.CallOption) (*ListBackupReply, error) {
	out := new(ListBackupReply)
	err := c.cc.Invoke(ctx, "/container.Container/ListBackup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *containerClient) AddBackupJob(ctx context.Context, in *AddBackupJobRequest, opts ...grpc.CallOption) (*AddBackupJobReply, error) {
	out := new(AddBackupJobReply)
	err := c.cc.Invoke(ctx, "/container.Container/AddBackupJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *containerClient) GetBackupJob(ctx context.Context, in *GetBackupJobRequest, opts ...grpc.CallOption) (*GetBackupJobReply, error) {
	out := new(GetBackupJobReply)
	err := c.cc.Invoke(ctx, "/container.Container/GetBackupJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *containerClient) DelBackupJob(ctx context.Context, in *DelBackupJobRequest, opts ...grpc.CallOption) (*DelBackupJobReply, error) {
	out := new(DelBackupJobReply)
	err := c.cc.Invoke(ctx, "/container.Container/DelBackupJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *containerClient) ListTemplate(ctx context.Context, in *ListTemplateRequest, opts ...grpc.CallOption) (*ListTemplateReply, error) {
	out := new(ListTemplateReply)
	err := c.cc.Invoke(ctx, "/container.Container/ListTemplate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *containerClient) CreateTemplate(ctx context.Context, in *CreateTemplateRequest, opts ...grpc.CallOption) (*CreateTemplateReply, error) {
	out := new(CreateTemplateReply)
	err := c.cc.Invoke(ctx, "/container.Container/CreateTemplate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *containerClient) UpdateTemplate(ctx context.Context, in *UpdateTemplateRequest, opts ...grpc.CallOption) (*UpdateTemplateReply, error) {
	out := new(UpdateTemplateReply)
	err := c.cc.Invoke(ctx, "/container.Container/UpdateTemplate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *containerClient) RemoveTemplate(ctx context.Context, in *RemoveTemplateRequest, opts ...grpc.CallOption) (*RemoveTemplateReply, error) {
	out := new(RemoveTemplateReply)
	err := c.cc.Invoke(ctx, "/container.Container/RemoveTemplate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *containerClient) InspectTemplate(ctx context.Context, in *InspectTemplateRequest, opts ...grpc.CallOption) (*InspectTemplateReply, error) {
	out := new(InspectTemplateReply)
	err := c.cc.Invoke(ctx, "/container.Container/InspectTemplate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *containerClient) MonitorHistory(ctx context.Context, in *MonitorHistoryRequest, opts ...grpc.CallOption) (*MonitorHistoryReply, error) {
	out := new(MonitorHistoryReply)
	err := c.cc.Invoke(ctx, "/container.Container/MonitorHistory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ContainerServer is the server API for Container service.
// All implementations must embed UnimplementedContainerServer
// for forward compatibility
type ContainerServer interface {
	List(context.Context, *ListRequest) (*ListReply, error)
	Create(context.Context, *CreateRequest) (*CreateReply, error)
	Inspect(context.Context, *InspectRequest) (*InspectReply, error)
	Start(context.Context, *StartRequest) (*StartReply, error)
	Stop(context.Context, *StopRequest) (*StopReply, error)
	Remove(context.Context, *RemoveRequest) (*RemoveReply, error)
	Restart(context.Context, *RestartRequest) (*RestartReply, error)
	Update(context.Context, *UpdateRequest) (*UpdateReply, error)
	Kill(context.Context, *KillRequest) (*KillReply, error)
	Status(context.Context, *StatusRequest) (*StatusReply, error)
	// 容器备份客户端接口
	CreateBackup(context.Context, *CreateBackupRequest) (*CreateBackupReply, error)
	UpdateBackup(context.Context, *UpdateBackupRequest) (*UpdateBackupReply, error)
	ResumeBackup(context.Context, *ResumeBackupRequest) (*ResumeBackupReply, error)
	RemoveBackup(context.Context, *RemoveBackupRequest) (*RemoveBackupReply, error)
	ListBackup(context.Context, *ListBackupRequest) (*ListBackupReply, error)
	// 容器备份内部接口
	AddBackupJob(context.Context, *AddBackupJobRequest) (*AddBackupJobReply, error)
	GetBackupJob(context.Context, *GetBackupJobRequest) (*GetBackupJobReply, error)
	DelBackupJob(context.Context, *DelBackupJobRequest) (*DelBackupJobReply, error)
	ListTemplate(context.Context, *ListTemplateRequest) (*ListTemplateReply, error)
	CreateTemplate(context.Context, *CreateTemplateRequest) (*CreateTemplateReply, error)
	UpdateTemplate(context.Context, *UpdateTemplateRequest) (*UpdateTemplateReply, error)
	RemoveTemplate(context.Context, *RemoveTemplateRequest) (*RemoveTemplateReply, error)
	InspectTemplate(context.Context, *InspectTemplateRequest) (*InspectTemplateReply, error)
	// 监控历史数据查询
	MonitorHistory(context.Context, *MonitorHistoryRequest) (*MonitorHistoryReply, error)
	mustEmbedUnimplementedContainerServer()
}

// UnimplementedContainerServer must be embedded to have forward compatible implementations.
type UnimplementedContainerServer struct {
}

func (UnimplementedContainerServer) List(context.Context, *ListRequest) (*ListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedContainerServer) Create(context.Context, *CreateRequest) (*CreateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedContainerServer) Inspect(context.Context, *InspectRequest) (*InspectReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Inspect not implemented")
}
func (UnimplementedContainerServer) Start(context.Context, *StartRequest) (*StartReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Start not implemented")
}
func (UnimplementedContainerServer) Stop(context.Context, *StopRequest) (*StopReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Stop not implemented")
}
func (UnimplementedContainerServer) Remove(context.Context, *RemoveRequest) (*RemoveReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Remove not implemented")
}
func (UnimplementedContainerServer) Restart(context.Context, *RestartRequest) (*RestartReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Restart not implemented")
}
func (UnimplementedContainerServer) Update(context.Context, *UpdateRequest) (*UpdateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedContainerServer) Kill(context.Context, *KillRequest) (*KillReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Kill not implemented")
}
func (UnimplementedContainerServer) Status(context.Context, *StatusRequest) (*StatusReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Status not implemented")
}
func (UnimplementedContainerServer) CreateBackup(context.Context, *CreateBackupRequest) (*CreateBackupReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBackup not implemented")
}
func (UnimplementedContainerServer) UpdateBackup(context.Context, *UpdateBackupRequest) (*UpdateBackupReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBackup not implemented")
}
func (UnimplementedContainerServer) ResumeBackup(context.Context, *ResumeBackupRequest) (*ResumeBackupReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResumeBackup not implemented")
}
func (UnimplementedContainerServer) RemoveBackup(context.Context, *RemoveBackupRequest) (*RemoveBackupReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveBackup not implemented")
}
func (UnimplementedContainerServer) ListBackup(context.Context, *ListBackupRequest) (*ListBackupReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBackup not implemented")
}
func (UnimplementedContainerServer) AddBackupJob(context.Context, *AddBackupJobRequest) (*AddBackupJobReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddBackupJob not implemented")
}
func (UnimplementedContainerServer) GetBackupJob(context.Context, *GetBackupJobRequest) (*GetBackupJobReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBackupJob not implemented")
}
func (UnimplementedContainerServer) DelBackupJob(context.Context, *DelBackupJobRequest) (*DelBackupJobReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelBackupJob not implemented")
}
func (UnimplementedContainerServer) ListTemplate(context.Context, *ListTemplateRequest) (*ListTemplateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTemplate not implemented")
}
func (UnimplementedContainerServer) CreateTemplate(context.Context, *CreateTemplateRequest) (*CreateTemplateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTemplate not implemented")
}
func (UnimplementedContainerServer) UpdateTemplate(context.Context, *UpdateTemplateRequest) (*UpdateTemplateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTemplate not implemented")
}
func (UnimplementedContainerServer) RemoveTemplate(context.Context, *RemoveTemplateRequest) (*RemoveTemplateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveTemplate not implemented")
}
func (UnimplementedContainerServer) InspectTemplate(context.Context, *InspectTemplateRequest) (*InspectTemplateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InspectTemplate not implemented")
}
func (UnimplementedContainerServer) MonitorHistory(context.Context, *MonitorHistoryRequest) (*MonitorHistoryReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MonitorHistory not implemented")
}
func (UnimplementedContainerServer) mustEmbedUnimplementedContainerServer() {}

// UnsafeContainerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ContainerServer will
// result in compilation errors.
type UnsafeContainerServer interface {
	mustEmbedUnimplementedContainerServer()
}

func RegisterContainerServer(s grpc.ServiceRegistrar, srv ContainerServer) {
	s.RegisterService(&Container_ServiceDesc, srv)
}

func _Container_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContainerServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/container.Container/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContainerServer).List(ctx, req.(*ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Container_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContainerServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/container.Container/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContainerServer).Create(ctx, req.(*CreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Container_Inspect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InspectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContainerServer).Inspect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/container.Container/Inspect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContainerServer).Inspect(ctx, req.(*InspectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Container_Start_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContainerServer).Start(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/container.Container/Start",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContainerServer).Start(ctx, req.(*StartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Container_Stop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContainerServer).Stop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/container.Container/Stop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContainerServer).Stop(ctx, req.(*StopRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Container_Remove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContainerServer).Remove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/container.Container/Remove",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContainerServer).Remove(ctx, req.(*RemoveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Container_Restart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RestartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContainerServer).Restart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/container.Container/Restart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContainerServer).Restart(ctx, req.(*RestartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Container_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContainerServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/container.Container/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContainerServer).Update(ctx, req.(*UpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Container_Kill_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KillRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContainerServer).Kill(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/container.Container/Kill",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContainerServer).Kill(ctx, req.(*KillRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Container_Status_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContainerServer).Status(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/container.Container/Status",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContainerServer).Status(ctx, req.(*StatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Container_CreateBackup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBackupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContainerServer).CreateBackup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/container.Container/CreateBackup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContainerServer).CreateBackup(ctx, req.(*CreateBackupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Container_UpdateBackup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBackupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContainerServer).UpdateBackup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/container.Container/UpdateBackup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContainerServer).UpdateBackup(ctx, req.(*UpdateBackupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Container_ResumeBackup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResumeBackupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContainerServer).ResumeBackup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/container.Container/ResumeBackup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContainerServer).ResumeBackup(ctx, req.(*ResumeBackupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Container_RemoveBackup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveBackupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContainerServer).RemoveBackup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/container.Container/RemoveBackup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContainerServer).RemoveBackup(ctx, req.(*RemoveBackupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Container_ListBackup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBackupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContainerServer).ListBackup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/container.Container/ListBackup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContainerServer).ListBackup(ctx, req.(*ListBackupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Container_AddBackupJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddBackupJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContainerServer).AddBackupJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/container.Container/AddBackupJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContainerServer).AddBackupJob(ctx, req.(*AddBackupJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Container_GetBackupJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBackupJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContainerServer).GetBackupJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/container.Container/GetBackupJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContainerServer).GetBackupJob(ctx, req.(*GetBackupJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Container_DelBackupJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelBackupJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContainerServer).DelBackupJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/container.Container/DelBackupJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContainerServer).DelBackupJob(ctx, req.(*DelBackupJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Container_ListTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContainerServer).ListTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/container.Container/ListTemplate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContainerServer).ListTemplate(ctx, req.(*ListTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Container_CreateTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContainerServer).CreateTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/container.Container/CreateTemplate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContainerServer).CreateTemplate(ctx, req.(*CreateTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Container_UpdateTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContainerServer).UpdateTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/container.Container/UpdateTemplate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContainerServer).UpdateTemplate(ctx, req.(*UpdateTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Container_RemoveTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContainerServer).RemoveTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/container.Container/RemoveTemplate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContainerServer).RemoveTemplate(ctx, req.(*RemoveTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Container_InspectTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InspectTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContainerServer).InspectTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/container.Container/InspectTemplate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContainerServer).InspectTemplate(ctx, req.(*InspectTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Container_MonitorHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MonitorHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContainerServer).MonitorHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/container.Container/MonitorHistory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContainerServer).MonitorHistory(ctx, req.(*MonitorHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Container_ServiceDesc is the grpc.ServiceDesc for Container service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Container_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "container.Container",
	HandlerType: (*ContainerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _Container_List_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _Container_Create_Handler,
		},
		{
			MethodName: "Inspect",
			Handler:    _Container_Inspect_Handler,
		},
		{
			MethodName: "Start",
			Handler:    _Container_Start_Handler,
		},
		{
			MethodName: "Stop",
			Handler:    _Container_Stop_Handler,
		},
		{
			MethodName: "Remove",
			Handler:    _Container_Remove_Handler,
		},
		{
			MethodName: "Restart",
			Handler:    _Container_Restart_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _Container_Update_Handler,
		},
		{
			MethodName: "Kill",
			Handler:    _Container_Kill_Handler,
		},
		{
			MethodName: "Status",
			Handler:    _Container_Status_Handler,
		},
		{
			MethodName: "CreateBackup",
			Handler:    _Container_CreateBackup_Handler,
		},
		{
			MethodName: "UpdateBackup",
			Handler:    _Container_UpdateBackup_Handler,
		},
		{
			MethodName: "ResumeBackup",
			Handler:    _Container_ResumeBackup_Handler,
		},
		{
			MethodName: "RemoveBackup",
			Handler:    _Container_RemoveBackup_Handler,
		},
		{
			MethodName: "ListBackup",
			Handler:    _Container_ListBackup_Handler,
		},
		{
			MethodName: "AddBackupJob",
			Handler:    _Container_AddBackupJob_Handler,
		},
		{
			MethodName: "GetBackupJob",
			Handler:    _Container_GetBackupJob_Handler,
		},
		{
			MethodName: "DelBackupJob",
			Handler:    _Container_DelBackupJob_Handler,
		},
		{
			MethodName: "ListTemplate",
			Handler:    _Container_ListTemplate_Handler,
		},
		{
			MethodName: "CreateTemplate",
			Handler:    _Container_CreateTemplate_Handler,
		},
		{
			MethodName: "UpdateTemplate",
			Handler:    _Container_UpdateTemplate_Handler,
		},
		{
			MethodName: "RemoveTemplate",
			Handler:    _Container_RemoveTemplate_Handler,
		},
		{
			MethodName: "InspectTemplate",
			Handler:    _Container_InspectTemplate_Handler,
		},
		{
			MethodName: "MonitorHistory",
			Handler:    _Container_MonitorHistory_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "container.proto",
}
