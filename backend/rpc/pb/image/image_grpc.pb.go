// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package image

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ImageClient is the client API for Image service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ImageClient interface {
	List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListReply, error)
	ListDB(ctx context.Context, in *ListDBRequest, opts ...grpc.CallOption) (*ListDBReply, error)
	Upload(ctx context.Context, opts ...grpc.CallOption) (Image_UploadClient, error)
	Update(ctx context.Context, opts ...grpc.CallOption) (Image_UpdateClient, error)
	Download(ctx context.Context, in *DownloadRequest, opts ...grpc.CallOption) (Image_DownloadClient, error)
	Approve(ctx context.Context, in *ApproveRequest, opts ...grpc.CallOption) (*ApproveReply, error)
	Remove(ctx context.Context, in *RemoveRequest, opts ...grpc.CallOption) (*RemoveReply, error)
	AgentSync(ctx context.Context, in *AgentSyncRequest, opts ...grpc.CallOption) (*AgentSyncReply, error)
}

type imageClient struct {
	cc grpc.ClientConnInterface
}

func NewImageClient(cc grpc.ClientConnInterface) ImageClient {
	return &imageClient{cc}
}

func (c *imageClient) List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListReply, error) {
	out := new(ListReply)
	err := c.cc.Invoke(ctx, "/image.Image/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imageClient) ListDB(ctx context.Context, in *ListDBRequest, opts ...grpc.CallOption) (*ListDBReply, error) {
	out := new(ListDBReply)
	err := c.cc.Invoke(ctx, "/image.Image/ListDB", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imageClient) Upload(ctx context.Context, opts ...grpc.CallOption) (Image_UploadClient, error) {
	stream, err := c.cc.NewStream(ctx, &Image_ServiceDesc.Streams[0], "/image.Image/Upload", opts...)
	if err != nil {
		return nil, err
	}
	x := &imageUploadClient{stream}
	return x, nil
}

type Image_UploadClient interface {
	Send(*UploadRequest) error
	CloseAndRecv() (*UploadReply, error)
	grpc.ClientStream
}

type imageUploadClient struct {
	grpc.ClientStream
}

func (x *imageUploadClient) Send(m *UploadRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *imageUploadClient) CloseAndRecv() (*UploadReply, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(UploadReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *imageClient) Update(ctx context.Context, opts ...grpc.CallOption) (Image_UpdateClient, error) {
	stream, err := c.cc.NewStream(ctx, &Image_ServiceDesc.Streams[1], "/image.Image/Update", opts...)
	if err != nil {
		return nil, err
	}
	x := &imageUpdateClient{stream}
	return x, nil
}

type Image_UpdateClient interface {
	Send(*UpdateRequest) error
	CloseAndRecv() (*UpdateReply, error)
	grpc.ClientStream
}

type imageUpdateClient struct {
	grpc.ClientStream
}

func (x *imageUpdateClient) Send(m *UpdateRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *imageUpdateClient) CloseAndRecv() (*UpdateReply, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(UpdateReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *imageClient) Download(ctx context.Context, in *DownloadRequest, opts ...grpc.CallOption) (Image_DownloadClient, error) {
	stream, err := c.cc.NewStream(ctx, &Image_ServiceDesc.Streams[2], "/image.Image/Download", opts...)
	if err != nil {
		return nil, err
	}
	x := &imageDownloadClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Image_DownloadClient interface {
	Recv() (*DownloadReply, error)
	grpc.ClientStream
}

type imageDownloadClient struct {
	grpc.ClientStream
}

func (x *imageDownloadClient) Recv() (*DownloadReply, error) {
	m := new(DownloadReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *imageClient) Approve(ctx context.Context, in *ApproveRequest, opts ...grpc.CallOption) (*ApproveReply, error) {
	out := new(ApproveReply)
	err := c.cc.Invoke(ctx, "/image.Image/Approve", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imageClient) Remove(ctx context.Context, in *RemoveRequest, opts ...grpc.CallOption) (*RemoveReply, error) {
	out := new(RemoveReply)
	err := c.cc.Invoke(ctx, "/image.Image/Remove", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imageClient) AgentSync(ctx context.Context, in *AgentSyncRequest, opts ...grpc.CallOption) (*AgentSyncReply, error) {
	out := new(AgentSyncReply)
	err := c.cc.Invoke(ctx, "/image.Image/AgentSync", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ImageServer is the server API for Image service.
// All implementations must embed UnimplementedImageServer
// for forward compatibility
type ImageServer interface {
	List(context.Context, *ListRequest) (*ListReply, error)
	ListDB(context.Context, *ListDBRequest) (*ListDBReply, error)
	Upload(Image_UploadServer) error
	Update(Image_UpdateServer) error
	Download(*DownloadRequest, Image_DownloadServer) error
	Approve(context.Context, *ApproveRequest) (*ApproveReply, error)
	Remove(context.Context, *RemoveRequest) (*RemoveReply, error)
	AgentSync(context.Context, *AgentSyncRequest) (*AgentSyncReply, error)
	mustEmbedUnimplementedImageServer()
}

// UnimplementedImageServer must be embedded to have forward compatible implementations.
type UnimplementedImageServer struct {
}

func (UnimplementedImageServer) List(context.Context, *ListRequest) (*ListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedImageServer) ListDB(context.Context, *ListDBRequest) (*ListDBReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDB not implemented")
}
func (UnimplementedImageServer) Upload(Image_UploadServer) error {
	return status.Errorf(codes.Unimplemented, "method Upload not implemented")
}
func (UnimplementedImageServer) Update(Image_UpdateServer) error {
	return status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedImageServer) Download(*DownloadRequest, Image_DownloadServer) error {
	return status.Errorf(codes.Unimplemented, "method Download not implemented")
}
func (UnimplementedImageServer) Approve(context.Context, *ApproveRequest) (*ApproveReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Approve not implemented")
}
func (UnimplementedImageServer) Remove(context.Context, *RemoveRequest) (*RemoveReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Remove not implemented")
}
func (UnimplementedImageServer) AgentSync(context.Context, *AgentSyncRequest) (*AgentSyncReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AgentSync not implemented")
}
func (UnimplementedImageServer) mustEmbedUnimplementedImageServer() {}

// UnsafeImageServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ImageServer will
// result in compilation errors.
type UnsafeImageServer interface {
	mustEmbedUnimplementedImageServer()
}

func RegisterImageServer(s grpc.ServiceRegistrar, srv ImageServer) {
	s.RegisterService(&Image_ServiceDesc, srv)
}

func _Image_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImageServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/image.Image/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImageServer).List(ctx, req.(*ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Image_ListDB_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDBRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImageServer).ListDB(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/image.Image/ListDB",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImageServer).ListDB(ctx, req.(*ListDBRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Image_Upload_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ImageServer).Upload(&imageUploadServer{stream})
}

type Image_UploadServer interface {
	SendAndClose(*UploadReply) error
	Recv() (*UploadRequest, error)
	grpc.ServerStream
}

type imageUploadServer struct {
	grpc.ServerStream
}

func (x *imageUploadServer) SendAndClose(m *UploadReply) error {
	return x.ServerStream.SendMsg(m)
}

func (x *imageUploadServer) Recv() (*UploadRequest, error) {
	m := new(UploadRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Image_Update_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ImageServer).Update(&imageUpdateServer{stream})
}

type Image_UpdateServer interface {
	SendAndClose(*UpdateReply) error
	Recv() (*UpdateRequest, error)
	grpc.ServerStream
}

type imageUpdateServer struct {
	grpc.ServerStream
}

func (x *imageUpdateServer) SendAndClose(m *UpdateReply) error {
	return x.ServerStream.SendMsg(m)
}

func (x *imageUpdateServer) Recv() (*UpdateRequest, error) {
	m := new(UpdateRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Image_Download_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DownloadRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ImageServer).Download(m, &imageDownloadServer{stream})
}

type Image_DownloadServer interface {
	Send(*DownloadReply) error
	grpc.ServerStream
}

type imageDownloadServer struct {
	grpc.ServerStream
}

func (x *imageDownloadServer) Send(m *DownloadReply) error {
	return x.ServerStream.SendMsg(m)
}

func _Image_Approve_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApproveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImageServer).Approve(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/image.Image/Approve",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImageServer).Approve(ctx, req.(*ApproveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Image_Remove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImageServer).Remove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/image.Image/Remove",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImageServer).Remove(ctx, req.(*RemoveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Image_AgentSync_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AgentSyncRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImageServer).AgentSync(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/image.Image/AgentSync",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImageServer).AgentSync(ctx, req.(*AgentSyncRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Image_ServiceDesc is the grpc.ServiceDesc for Image service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Image_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "image.Image",
	HandlerType: (*ImageServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _Image_List_Handler,
		},
		{
			MethodName: "ListDB",
			Handler:    _Image_ListDB_Handler,
		},
		{
			MethodName: "Approve",
			Handler:    _Image_Approve_Handler,
		},
		{
			MethodName: "Remove",
			Handler:    _Image_Remove_Handler,
		},
		{
			MethodName: "AgentSync",
			Handler:    _Image_AgentSync_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Upload",
			Handler:       _Image_Upload_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "Update",
			Handler:       _Image_Update_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "Download",
			Handler:       _Image_Download_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "image.proto",
}
