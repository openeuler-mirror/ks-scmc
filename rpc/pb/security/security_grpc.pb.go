// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package security

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SecurityClient is the client API for Security service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SecurityClient interface {
	// 进程保护
	ListProcProtection(ctx context.Context, in *ListProcProtectionRequest, opts ...grpc.CallOption) (*ListProcProtectionReply, error)
	UpdateProcProtection(ctx context.Context, in *UpdateProcProtectionRequest, opts ...grpc.CallOption) (*UpdateProcProtectionReply, error)
	// 文件保护
	ListFileProtection(ctx context.Context, in *ListFileProtectionRequest, opts ...grpc.CallOption) (*ListFileProtectionReply, error)
	UpdateFileProtection(ctx context.Context, in *UpdateFileProtectionRequest, opts ...grpc.CallOption) (*UpdateFileProtectionReply, error)
	LoadSecurityConfig(ctx context.Context, in *LoadSecurityConfigRequset, opts ...grpc.CallOption) (*LoadSecurityConfigReply, error)
}

type securityClient struct {
	cc grpc.ClientConnInterface
}

func NewSecurityClient(cc grpc.ClientConnInterface) SecurityClient {
	return &securityClient{cc}
}

func (c *securityClient) ListProcProtection(ctx context.Context, in *ListProcProtectionRequest, opts ...grpc.CallOption) (*ListProcProtectionReply, error) {
	out := new(ListProcProtectionReply)
	err := c.cc.Invoke(ctx, "/security.Security/ListProcProtection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *securityClient) UpdateProcProtection(ctx context.Context, in *UpdateProcProtectionRequest, opts ...grpc.CallOption) (*UpdateProcProtectionReply, error) {
	out := new(UpdateProcProtectionReply)
	err := c.cc.Invoke(ctx, "/security.Security/UpdateProcProtection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *securityClient) ListFileProtection(ctx context.Context, in *ListFileProtectionRequest, opts ...grpc.CallOption) (*ListFileProtectionReply, error) {
	out := new(ListFileProtectionReply)
	err := c.cc.Invoke(ctx, "/security.Security/ListFileProtection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *securityClient) UpdateFileProtection(ctx context.Context, in *UpdateFileProtectionRequest, opts ...grpc.CallOption) (*UpdateFileProtectionReply, error) {
	out := new(UpdateFileProtectionReply)
	err := c.cc.Invoke(ctx, "/security.Security/UpdateFileProtection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *securityClient) LoadSecurityConfig(ctx context.Context, in *LoadSecurityConfigRequset, opts ...grpc.CallOption) (*LoadSecurityConfigReply, error) {
	out := new(LoadSecurityConfigReply)
	err := c.cc.Invoke(ctx, "/security.Security/LoadSecurityConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SecurityServer is the server API for Security service.
// All implementations must embed UnimplementedSecurityServer
// for forward compatibility
type SecurityServer interface {
	// 进程保护
	ListProcProtection(context.Context, *ListProcProtectionRequest) (*ListProcProtectionReply, error)
	UpdateProcProtection(context.Context, *UpdateProcProtectionRequest) (*UpdateProcProtectionReply, error)
	// 文件保护
	ListFileProtection(context.Context, *ListFileProtectionRequest) (*ListFileProtectionReply, error)
	UpdateFileProtection(context.Context, *UpdateFileProtectionRequest) (*UpdateFileProtectionReply, error)
	LoadSecurityConfig(context.Context, *LoadSecurityConfigRequset) (*LoadSecurityConfigReply, error)
	mustEmbedUnimplementedSecurityServer()
}

// UnimplementedSecurityServer must be embedded to have forward compatible implementations.
type UnimplementedSecurityServer struct {
}

func (UnimplementedSecurityServer) ListProcProtection(context.Context, *ListProcProtectionRequest) (*ListProcProtectionReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListProcProtection not implemented")
}
func (UnimplementedSecurityServer) UpdateProcProtection(context.Context, *UpdateProcProtectionRequest) (*UpdateProcProtectionReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProcProtection not implemented")
}
func (UnimplementedSecurityServer) ListFileProtection(context.Context, *ListFileProtectionRequest) (*ListFileProtectionReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFileProtection not implemented")
}
func (UnimplementedSecurityServer) UpdateFileProtection(context.Context, *UpdateFileProtectionRequest) (*UpdateFileProtectionReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFileProtection not implemented")
}
func (UnimplementedSecurityServer) LoadSecurityConfig(context.Context, *LoadSecurityConfigRequset) (*LoadSecurityConfigReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoadSecurityConfig not implemented")
}
func (UnimplementedSecurityServer) mustEmbedUnimplementedSecurityServer() {}

// UnsafeSecurityServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SecurityServer will
// result in compilation errors.
type UnsafeSecurityServer interface {
	mustEmbedUnimplementedSecurityServer()
}

func RegisterSecurityServer(s grpc.ServiceRegistrar, srv SecurityServer) {
	s.RegisterService(&Security_ServiceDesc, srv)
}

func _Security_ListProcProtection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListProcProtectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecurityServer).ListProcProtection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/security.Security/ListProcProtection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecurityServer).ListProcProtection(ctx, req.(*ListProcProtectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Security_UpdateProcProtection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProcProtectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecurityServer).UpdateProcProtection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/security.Security/UpdateProcProtection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecurityServer).UpdateProcProtection(ctx, req.(*UpdateProcProtectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Security_ListFileProtection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListFileProtectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecurityServer).ListFileProtection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/security.Security/ListFileProtection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecurityServer).ListFileProtection(ctx, req.(*ListFileProtectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Security_UpdateFileProtection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateFileProtectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecurityServer).UpdateFileProtection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/security.Security/UpdateFileProtection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecurityServer).UpdateFileProtection(ctx, req.(*UpdateFileProtectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Security_LoadSecurityConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoadSecurityConfigRequset)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecurityServer).LoadSecurityConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/security.Security/LoadSecurityConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecurityServer).LoadSecurityConfig(ctx, req.(*LoadSecurityConfigRequset))
	}
	return interceptor(ctx, in, info, handler)
}

// Security_ServiceDesc is the grpc.ServiceDesc for Security service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Security_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "security.Security",
	HandlerType: (*SecurityServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListProcProtection",
			Handler:    _Security_ListProcProtection_Handler,
		},
		{
			MethodName: "UpdateProcProtection",
			Handler:    _Security_UpdateProcProtection_Handler,
		},
		{
			MethodName: "ListFileProtection",
			Handler:    _Security_ListFileProtection_Handler,
		},
		{
			MethodName: "UpdateFileProtection",
			Handler:    _Security_UpdateFileProtection_Handler,
		},
		{
			MethodName: "LoadSecurityConfig",
			Handler:    _Security_LoadSecurityConfig_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "security.proto",
}
