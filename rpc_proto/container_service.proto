syntax = "proto3";

option go_package = "ksc-mcube/rpc/pb/container";

package container;

import "common.proto";
import "container_types.proto";

service Container {
  rpc List(ListRequest) returns (ListReply) {}
  rpc Create(CreateRequest) returns (CreateReply) {}
  rpc Inspect(InspectRequest) returns (InspectReply) {}
  rpc Start(StartRequest) returns (StartReply) {}
  rpc Stop(StopRequest) returns (StopReply) {}
  rpc Remove(RemoveRequest) returns (RemoveReply) {}
  rpc Restart(RestartRequest) returns (RestartReply) {}
  // 以下未实现
  rpc Update(UpdateRequest) returns (UpdateReply) {}
  rpc Kill(KillRequest) returns (KillReply) {}

  rpc Status(StatusRequest) returns (StatusReply) {}
}

message ListRequest {
    common.RequestHeader header = 1;
    repeated int64 node_ids = 2;
    bool list_all = 3;
}

message ListReply {
    common.ReplyHeader header = 1;

    repeated NodeContainer containers = 2;
}

message CreateRequest {
    common.RequestHeader header = 1;
    int64 node_id = 2;
    string name = 3;
    bool enable_graphic = 4;

    ContainerConfig config = 11;
    HostConfig host_config = 12;
    map<string, EndpointSetting> network_config = 13;
}

message CreateReply {
    common.ReplyHeader header = 1;
    string container_id = 2;
    repeated string warnings = 3;
}

message InspectRequest {
    common.RequestHeader header = 1;
    int64 node_id = 2;
    string container_id = 3;
}

message InspectReply {
    common.ReplyHeader header = 1;
    ContainerInfo info = 2;
    HostConfig host_config = 3;
    repeated Mount mounts = 4;
    ContainerConfig config = 5;
    map<string, EndpointSetting> network_settings = 6;
}

message StartRequest {
    common.RequestHeader header = 1;
    repeated ContainerIdList ids = 2;
}

message StartReply {
    common.ReplyHeader header = 1;
    repeated string ok_ids = 2;
}

message StopRequest {
    common.RequestHeader header = 1;
    repeated ContainerIdList ids = 2;
}

message StopReply {
    common.ReplyHeader header = 1;
    repeated string ok_ids = 2;
}

message KillRequest {
    common.RequestHeader header = 1;
    repeated ContainerIdList ids = 2;
}

message KillReply {
    common.ReplyHeader header = 1;
    repeated string ok_ids = 2;
}

message RestartRequest {
    common.RequestHeader header = 1;
    repeated ContainerIdList ids = 2;
}

message RestartReply {
    common.ReplyHeader header = 1;
    repeated string ok_ids = 2;
}

message UpdateRequest {
    common.RequestHeader header = 1;
    int64 node_id = 2;
    string container_id = 3;
    ResourceConfig resource_config = 4;
    RestartPolicy restart_policy = 5;
}

message UpdateReply {
    common.ReplyHeader header = 1;
}

message RemoveRequest {
    common.RequestHeader header = 1;
    repeated ContainerIdList ids = 2;
    bool remove_volumes = 4;
}

message RemoveReply {
    common.ReplyHeader header = 1;
    repeated string ok_ids = 2;
}

message StatusRequest {
    common.RequestHeader header = 1;
    int64 node_id = 2;
}

message StatusReply {
    common.ReplyHeader header = 1;
    repeated ResourceStat status = 2;
}
